{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["'use strict';\n\nconsole.log('funciona');\n\n// aplicación web de búsqueda de series de TV\n//maquetación con HTML y Sass, tras JavaScript, (evaluacion x JS, no por html y csss) \n\n\n// Vamos de definir los distintos hitos del ejercicio:\n// 1. Estructura básica\n// La aplicación de búsqueda de series consta de dos partes\n// 1. Un campo de texto y un botón para buscar series por su título\n// 2. Un listado de resultados de búsqueda donde aparece el cartel de la serie y el título\n// Para realizar la estructura básica del ejercicio usaremos la base de gulp del Adalab Web Starter Kit.\n\n// 2. Búsqueda\n// Al hacer clic sobre el botón de 'Buscar', nuestra aplicación debe conectarse al API abierto de\n// TVMaze para búsqueda de series. Os recomendamos echar un vistazo al JSON que devuelve una\n// petición de búsqueda para ver qué datos de los que nos devuelve necesitamos. Para construir la\n// URL de búsqueda necesitaremos recoger el texto que ha introducido el usuario en el campo de\n\n// búsqueda. \n\nconst button = document.querySelector('.button');\nconst input = document. querySelector ('.input');\nconst lista = document.querySelector ('.lista');\nconst carteldelaserie = document.querySelector ('.carteldelaserie');\nconst titulodelaserie = document.querySelector ('.titulodelaserie');\n\nconsole.log (button, input, lista, carteldelaserie, titulodelaserie);\n\nfunction handlerFunction(){\n  fetch(' http://api.tvmaze.com/search/shows?q=girls')\n    .then(function(response){\n      return response.json();\n    })\n    .then(function(data){\n      console.log(data);\n      document.body.innerHTML = data.result;\n    });\n}\n\nbutton.addEventListener('click', handlerFunction);\ninput.addEventListener ('click', handlerFunction);\n\n// Por cada show contenido en el resultado de búsqueda debemos pintar una tarjeta\n// donde mostramos una imagen de la serie y el título.\n// NOTA: Para pintar la información en la página puedes elegir hacerlo de forma básica con\n// innerHTML o manipulando de forma avanzada el DOM\n// Algunas de las series que obtenemos en los resultados no tienen imagen. En ese caso debemos\n// mostrar una imagen de relleno. Podemos crear una imagen de relleno con el servicio de\n// placeholder.com donde en la propia URL indicamos el tamaño, colores, texto:\n// https://via.placeholder.com/210x295/ffffff/666666/?text=TV\n// 3. Favoritos\n// Una vez aparecen los resultados de búsqueda, podremos indicar cuáles son nuestras series\n// favoritas. Para ello, al hacer clic sobre un resultado el color de fondo y el de fuente se\n// intercambian.\n// Además, debes crear un listado (array) con las series favoritas que almacenamos en una variable.\n// Este listado lo mostraremos en la parte izquierda de la pantalla, debajo del formulario de búqueda.\n// Para terminar, si volvemos a realizar una nueva búsqueda, los favoritos se irán acumulando en\n// nuestra lista.\n// 4. Almacenamiento local\n// Vamos a almacenar el listado de favoritos en el localStorage. De esta forma, al recargar la página\n// el listado de favoritos se mantiene.\n// 5. BONUS: Afinar la maquetación\n// Una vez terminada la parte de interacción, podemos centrarnos en la parte de maquetación donde\n// tenéis libertad para decidir los estilo. En cualquier caso os dejamos una propuesta gráfica.\n// 6. BONUS: Borrar favoritos\n// Como bonus, os proponemos la opción de borrar favoritos. De esta forma, al hacer clic sobre el\n// icono de la 'x' al lado de los favoritos, podremos borrarlos (de nuestra lista y del localStorage).\n// Para terminar de rematar nuestra app de series, nos gustaría poder añadir/quitar favorito al hacer\n// clic sobre una serie. Y que, si realizamos una nueva búsqueda y sale una serie que ya es favorita,\n// aparezca ya resaltada en los resultados de búsqueda (con colores de fondo y texto\n// intercambiados).\n// Y ya sería fantástico si al final de la lista de favoritos tenemos un botón para borrarlos todos.\n// Entrega\n// La entrega del ejercicio se realizará en el mismo repositorio que has creado al comienzo del\n// ejercicio. Hemos pautado 12 horas de dedicación al ejercicio, por lo que el límite de entrega es\n// turno de mañana: próxima sesión a las 15:00h\n// turno de tarde: próxima sesión a las 22:00h\n// Normas\n// Este ejercicio está pensado para que lo realices de forma individual en clase, pero podrás consultar\n// tus dudas con la profesora y tus compañeras si lo consideras necesario. Aún facilitando la\n// comunicación entre compañeras, durante la prueba está prohibido copiar código de otra persona o\n// acceder a su portátil. Confiamos en tu responsabilidad. La evaluación es una buena oportunidad\n// para conocer cómo estás progresando, saber qué temas debes reforzar durante las siguientes\n// semanas y cuáles dominas. Te recomendamos que te sientas cómoda con el ejercicio que\n// entregues y no envíes cosas copiadas que no entiendas. Si detectamos que has entregado código\n// copiado de una compañera, no evaluaremos tu ejercicio y pasarás directamente a la re‒evaluación\n// del módulo. Tu objetivo no debería ser pasar la evaluación sino convertirte en programadora, y\n// esto debes tenerlo claro en todo momento. Una vez entregado el ejercicio realizarás una revisión\n// del mismo con la profesora (30 minutos), que te pedirá que expliques las decisiones tomadas para\n// realizarlo y te propondrá realizar cambios in situ sobre tu solución. Al final, tendrás un feedback\n// sobre aspectos a destacar y a mejorar en tu ejercicio, y sabrás qué objetivos de aprendizaje has\n// superado de los listados a continuación.\n// Criterios de evaluación\n// Vamos a listar los criterios de evaluación de este ejercicio. Si no superas al menos el 80% de estos\n// criterios o no has superado algún criterio clave (marcados con *) te pediremos que realices una re‒\n// evaluación con el fin de que termines el curso mejor preparada y enfrentes tu primera experiencia\n// profesional con más seguridad. En caso contrario, estás aprendiendo al ritmo que hemos pautado\n// para poder afrontar los conocimientos del siguiente módulo.\n// JavaScript básico\n// Crear código JavaScript con sintaxis correcta, bien estructurado e indentado*\n// Usar constantes/variables para almacenar información y re‒asignar valores*\n// Usar condicionales para ejecutar acciones distintas en función de una condición\n// Saber trabajar con listados de datos (arrays)*\n// Usar funciones para estructurar el código\n// Saber modificar la información del DOM para añadir contenido dinámico*\n// Saber escuchar eventos del DOM y actuar en consecuencia*\n// AJAX y APIs\n// Crear peticiones con fetch y promesas*\n// Saber trabajar correctamente con la respuesta del servidor*\n// Gestionar información en formato JSON\n// Usar el localStorage para guardar información en el navegador\n// Issues\n// Haber resuelto las issues de la evaluación intermedia\n// Otros criterios a tener en cuenta\n// Usar inglés para nombres de variables, funciones, clases, mensajes de commit, nombres de\n// ficheros\n// El repositorio de GitHub debe tener README y un enlace a la web en GitHub Pages accesible\n// desde la página principal\n// ¡Al turrón!\n\n"]}